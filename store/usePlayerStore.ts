// T·∫°o store v·ªõi Zustand ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i ph√°t nh·∫°c
import { create } from 'zustand';
import { Audio } from 'expo-av';
import localTracks from '@/assets/songs/localTracks';

interface PlayerState {
  currentTrackId: string | null; // ID b√†i h√°t hi·ªán t·∫°i
  currentTrackMeta: any | null;  // Metadata b√†i hi·ªán t·∫°i (t√™n, ngh·ªá sƒ©, ·∫£nh...)
  isPlaying: boolean;            // C√≥ ƒëang ph√°t nh·∫°c kh√¥ng
  sound: Audio.Sound | null;     // ƒê·ªëi t∆∞·ª£ng √¢m thanh ƒëang ph√°t
  position: number;              // V·ªã tr√≠ hi·ªán t·∫°i trong b√†i (ms)
  duration: number;              // T·ªïng th·ªùi gian b√†i (ms)

  // C√°c h√†m ƒëi·ªÅu khi·ªÉn nh·∫°c
  play: (id: string) => Promise<void>;
  pause: () => Promise<void>;
  resume: () => Promise<void>;
  playNext: (albumTracks: any[]) => Promise<void>;
  playPrev: (albumTracks: any[]) => Promise<void>;
}

// T·∫°o Zustand store
export const usePlayerStore = create<PlayerState>((set, get) => ({
  currentTrackId: null,
  currentTrackMeta: null,
  isPlaying: false,
  sound: null,
  position: 0,
  duration: 0,

  // Ph√°t m·ªôt b√†i h√°t m·ªõi theo ID
  play: async (id: string) => {
    const { sound: oldSound } = get();

    // N·∫øu c√≥ b√†i ƒëang ph√°t tr∆∞·ªõc ƒë√≥ th√¨ d·ª´ng l·∫°i
    if (oldSound) await oldSound.unloadAsync();

    // Reset tr·∫°ng th√°i v·ªÅ m·∫∑c ƒë·ªãnh tr∆∞·ªõc khi ph√°t b√†i m·ªõi
    set({
      currentTrackId: id,
      currentTrackMeta: null,
      sound: null,
      isPlaying: false,
      position: 0,
      duration: 0,
    });

    // T√¨m file nh·∫°c local theo ID
    const track = localTracks.find(t => t.id === id);
    if (!track) {
      console.log('üö´ Kh√¥ng c√≥ file nh·∫°c local cho:', id);
      return;
    }

    // Load v√† ph√°t nh·∫°c b·∫±ng expo-av
    const { sound, status } = await Audio.Sound.createAsync(track.url, { shouldPlay: true });

    // Theo d√µi tr·∫°ng th√°i ph√°t nh·∫°c li√™n t·ª•c
    sound.setOnPlaybackStatusUpdate(status => {
      if (!status.isLoaded) return;
      set({
        position: status.positionMillis,
        duration: status.durationMillis || 0,
        isPlaying: status.isPlaying,
      });
    });

    // L∆∞u l·∫°i th√¥ng tin v√†o store
    set({
      sound,
      currentTrackMeta: track,
      isPlaying: true,
    });

    console.log('‚ñ∂Ô∏è ƒêang ph√°t:', track.id);
  },

  // T·∫°m d·ª´ng ph√°t nh·∫°c
  pause: async () => {
    const { sound } = get();
    if (sound) {
      await sound.pauseAsync();
      set({ isPlaying: false });
    }
  },

  // Ti·∫øp t·ª•c ph√°t nh·∫°c
  resume: async () => {
    const { sound } = get();
    if (sound) {
      await sound.playAsync();
      set({ isPlaying: true });
    }
  },

  // Ph√°t b√†i k·∫ø ti·∫øp trong danh s√°ch album
  playNext: async (albumTracks: any[]) => {
    const { currentTrackId, play } = get();
    const idx = albumTracks.findIndex(t => t.id === currentTrackId);
    const nextTrack = albumTracks[idx + 1];
    if (nextTrack) {
      console.log('‚è≠ Qua b√†i:', nextTrack.name);
      await play(nextTrack.id);
    } else {
      console.log('‚õîÔ∏è Kh√¥ng c√≥ b√†i ti·∫øp theo');
    }
  },

  // Ph√°t b√†i tr∆∞·ªõc ƒë√≥ trong danh s√°ch album
  playPrev: async (albumTracks: any[]) => {
    const { currentTrackId, play } = get();
    const idx = albumTracks.findIndex(t => t.id === currentTrackId);
    const prevTrack = albumTracks[idx - 1];
    if (prevTrack) {
      console.log('‚èÆ Quay l·∫°i b√†i:', prevTrack.name);
      await play(prevTrack.id);
    } else {
      console.log('‚õîÔ∏è Kh√¥ng c√≥ b√†i tr∆∞·ªõc');
    }
  },
}));
